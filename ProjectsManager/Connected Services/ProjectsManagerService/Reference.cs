//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectsManager.ProjectsManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginName {
            get {
                return this.LoginNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginNameField, value) != true)) {
                    this.LoginNameField = value;
                    this.RaisePropertyChanged("LoginName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Perms {
            get {
                return this.PermsField;
            }
            set {
                if ((object.ReferenceEquals(this.PermsField, value) != true)) {
                    this.PermsField = value;
                    this.RaisePropertyChanged("Perms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessLogInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class AccessLogInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TsCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifner {
            get {
                return this.IdentifnerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifnerField, value) != true)) {
                    this.IdentifnerField = value;
                    this.RaisePropertyChanged("Identifner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TsCreated {
            get {
                return this.TsCreatedField;
            }
            set {
                if ((this.TsCreatedField.Equals(value) != true)) {
                    this.TsCreatedField = value;
                    this.RaisePropertyChanged("TsCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostingWebApplicationInfoComplex", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class HostingWebApplicationInfoComplex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo ApplicationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ProjectsManager.ProjectsManagerService.HostingWebApplicationBindingInfo[] BindingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ProjectsManager.ProjectsManagerService.HostingWebServerInfo ServerInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo ApplicationInfo {
            get {
                return this.ApplicationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationInfoField, value) != true)) {
                    this.ApplicationInfoField = value;
                    this.RaisePropertyChanged("ApplicationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProjectsManager.ProjectsManagerService.HostingWebApplicationBindingInfo[] Bindings {
            get {
                return this.BindingsField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingsField, value) != true)) {
                    this.BindingsField = value;
                    this.RaisePropertyChanged("Bindings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProjectsManager.ProjectsManagerService.HostingWebServerInfo ServerInfo {
            get {
                return this.ServerInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerInfoField, value) != true)) {
                    this.ServerInfoField = value;
                    this.RaisePropertyChanged("ServerInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostingWebApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class HostingWebApplicationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BindingsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DomainsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FirmIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MeasuredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NotPublishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlTestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WebApplicationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BindingsCount {
            get {
                return this.BindingsCountField;
            }
            set {
                if ((this.BindingsCountField.Equals(value) != true)) {
                    this.BindingsCountField = value;
                    this.RaisePropertyChanged("BindingsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainsCount {
            get {
                return this.DomainsCountField;
            }
            set {
                if ((this.DomainsCountField.Equals(value) != true)) {
                    this.DomainsCountField = value;
                    this.RaisePropertyChanged("DomainsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FirmId {
            get {
                return this.FirmIdField;
            }
            set {
                if ((this.FirmIdField.Equals(value) != true)) {
                    this.FirmIdField = value;
                    this.RaisePropertyChanged("FirmId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmIdentifier {
            get {
                return this.FirmIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmIdentifierField, value) != true)) {
                    this.FirmIdentifierField = value;
                    this.RaisePropertyChanged("FirmIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmName {
            get {
                return this.FirmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmNameField, value) != true)) {
                    this.FirmNameField = value;
                    this.RaisePropertyChanged("FirmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifier {
            get {
                return this.IdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifierField, value) != true)) {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Measured {
            get {
                return this.MeasuredField;
            }
            set {
                if ((this.MeasuredField.Equals(value) != true)) {
                    this.MeasuredField = value;
                    this.RaisePropertyChanged("Measured");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NotPublished {
            get {
                return this.NotPublishedField;
            }
            set {
                if ((this.NotPublishedField.Equals(value) != true)) {
                    this.NotPublishedField = value;
                    this.RaisePropertyChanged("NotPublished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectIdentifier {
            get {
                return this.ProjectIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIdentifierField, value) != true)) {
                    this.ProjectIdentifierField = value;
                    this.RaisePropertyChanged("ProjectIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((this.ServerIdField.Equals(value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusCode {
            get {
                return this.StatusCodeField;
            }
            set {
                if ((this.StatusCodeField.Equals(value) != true)) {
                    this.StatusCodeField = value;
                    this.RaisePropertyChanged("StatusCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlReport {
            get {
                return this.UrlReportField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlReportField, value) != true)) {
                    this.UrlReportField = value;
                    this.RaisePropertyChanged("UrlReport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlTest {
            get {
                return this.UrlTestField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlTestField, value) != true)) {
                    this.UrlTestField = value;
                    this.RaisePropertyChanged("UrlTest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WebApplicationId {
            get {
                return this.WebApplicationIdField;
            }
            set {
                if ((this.WebApplicationIdField.Equals(value) != true)) {
                    this.WebApplicationIdField = value;
                    this.RaisePropertyChanged("WebApplicationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostingWebServerInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class HostingWebServerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerPlatformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerTestDomainField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseAddress {
            get {
                return this.BaseAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseAddressField, value) != true)) {
                    this.BaseAddressField = value;
                    this.RaisePropertyChanged("BaseAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseIp {
            get {
                return this.BaseIpField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseIpField, value) != true)) {
                    this.BaseIpField = value;
                    this.RaisePropertyChanged("BaseIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((this.ServerIdField.Equals(value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerIdentifier {
            get {
                return this.ServerIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIdentifierField, value) != true)) {
                    this.ServerIdentifierField = value;
                    this.RaisePropertyChanged("ServerIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerPlatform {
            get {
                return this.ServerPlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerPlatformField, value) != true)) {
                    this.ServerPlatformField = value;
                    this.RaisePropertyChanged("ServerPlatform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerTestDomain {
            get {
                return this.ServerTestDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerTestDomainField, value) != true)) {
                    this.ServerTestDomainField = value;
                    this.RaisePropertyChanged("ServerTestDomain");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostingWebApplicationBindingInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class HostingWebApplicationBindingInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHttpsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHttps {
            get {
                return this.IsHttpsField;
            }
            set {
                if ((this.IsHttpsField.Equals(value) != true)) {
                    this.IsHttpsField = value;
                    this.RaisePropertyChanged("IsHttps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetDriveInfo", Namespace="http://schemas.datacontract.org/2004/07/IcarusHosting.Server.HostingSystem.Servic" +
        "es")]
    [System.SerializableAttribute()]
    public partial class NetDriveInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerUrl {
            get {
                return this.ServerUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerUrlField, value) != true)) {
                    this.ServerUrlField = value;
                    this.RaisePropertyChanged("ServerUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectsManagerService.IProjectsManagerService")]
    public interface IProjectsManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/AddToAccessLog", ReplyAction="http://tempuri.org/IProjectsManagerService/AddToAccessLogResponse")]
        void AddToAccessLog(string applicationIdentifier, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/AddToAccessLog", ReplyAction="http://tempuri.org/IProjectsManagerService/AddToAccessLogResponse")]
        System.Threading.Tasks.Task AddToAccessLogAsync(string applicationIdentifier, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetCentaurUserInfo", ReplyAction="http://tempuri.org/IProjectsManagerService/GetCentaurUserInfoResponse")]
        ProjectsManager.ProjectsManagerService.UserInfo GetCentaurUserInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetCentaurUserInfo", ReplyAction="http://tempuri.org/IProjectsManagerService/GetCentaurUserInfoResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.UserInfo> GetCentaurUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetDebugFlag", ReplyAction="http://tempuri.org/IProjectsManagerService/GetDebugFlagResponse")]
        bool GetDebugFlag(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetDebugFlag", ReplyAction="http://tempuri.org/IProjectsManagerService/GetDebugFlagResponse")]
        System.Threading.Tasks.Task<bool> GetDebugFlagAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetEasyWebUsers", ReplyAction="http://tempuri.org/IProjectsManagerService/GetEasyWebUsersResponse")]
        ProjectsManager.ProjectsManagerService.UserInfo[] GetEasyWebUsers(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetEasyWebUsers", ReplyAction="http://tempuri.org/IProjectsManagerService/GetEasyWebUsersResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.UserInfo[]> GetEasyWebUsersAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetEasyWebVersion", ReplyAction="http://tempuri.org/IProjectsManagerService/GetEasyWebVersionResponse")]
        string GetEasyWebVersion(string aApplicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetEasyWebVersion", ReplyAction="http://tempuri.org/IProjectsManagerService/GetEasyWebVersionResponse")]
        System.Threading.Tasks.Task<string> GetEasyWebVersionAsync(string aApplicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetLastAccessLog", ReplyAction="http://tempuri.org/IProjectsManagerService/GetLastAccessLogResponse")]
        ProjectsManager.ProjectsManagerService.AccessLogInfo GetLastAccessLog(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetLastAccessLog", ReplyAction="http://tempuri.org/IProjectsManagerService/GetLastAccessLogResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.AccessLogInfo> GetLastAccessLogAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetLastAccessLogAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetLastAccessLogAllResponse")]
        ProjectsManager.ProjectsManagerService.AccessLogInfo[] GetLastAccessLogAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetLastAccessLogAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetLastAccessLogAllResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.AccessLogInfo[]> GetLastAccessLogAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebApplicationInfoComplex", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebApplicationInfoComplexResponse")]
        ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex GetWebApplicationInfoComplex(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebApplicationInfoComplex", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebApplicationInfoComplexResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex> GetWebApplicationInfoComplexAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebApplicationListAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebApplicationListAllResponse")]
        ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo[] GetWebApplicationListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebApplicationListAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebApplicationListAllResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo[]> GetWebApplicationListAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebServerListAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebServerListAllResponse")]
        ProjectsManager.ProjectsManagerService.HostingWebServerInfo[] GetWebServerListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/GetWebServerListAll", ReplyAction="http://tempuri.org/IProjectsManagerService/GetWebServerListAllResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebServerInfo[]> GetWebServerListAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/NetDriveConnect", ReplyAction="http://tempuri.org/IProjectsManagerService/NetDriveConnectResponse")]
        ProjectsManager.ProjectsManagerService.NetDriveInfo NetDriveConnect(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/NetDriveConnect", ReplyAction="http://tempuri.org/IProjectsManagerService/NetDriveConnectResponse")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.NetDriveInfo> NetDriveConnectAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/NetDriveDisconnect", ReplyAction="http://tempuri.org/IProjectsManagerService/NetDriveDisconnectResponse")]
        bool NetDriveDisconnect(string applicationIdentifier, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/NetDriveDisconnect", ReplyAction="http://tempuri.org/IProjectsManagerService/NetDriveDisconnectResponse")]
        System.Threading.Tasks.Task<bool> NetDriveDisconnectAsync(string applicationIdentifier, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/ReadSmtpConfig", ReplyAction="http://tempuri.org/IProjectsManagerService/ReadSmtpConfigResponse")]
        System.Collections.Generic.Dictionary<string, object> ReadSmtpConfig(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/ReadSmtpConfig", ReplyAction="http://tempuri.org/IProjectsManagerService/ReadSmtpConfigResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> ReadSmtpConfigAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/RequestEasyWebAccess", ReplyAction="http://tempuri.org/IProjectsManagerService/RequestEasyWebAccessResponse")]
        string RequestEasyWebAccess(string applicationIdentifier, string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/RequestEasyWebAccess", ReplyAction="http://tempuri.org/IProjectsManagerService/RequestEasyWebAccessResponse")]
        System.Threading.Tasks.Task<string> RequestEasyWebAccessAsync(string applicationIdentifier, string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/RestartApplication", ReplyAction="http://tempuri.org/IProjectsManagerService/RestartApplicationResponse")]
        bool RestartApplication(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/RestartApplication", ReplyAction="http://tempuri.org/IProjectsManagerService/RestartApplicationResponse")]
        System.Threading.Tasks.Task<bool> RestartApplicationAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/SetDebugFlag", ReplyAction="http://tempuri.org/IProjectsManagerService/SetDebugFlagResponse")]
        void SetDebugFlag(string applicationIdentifier, bool debugFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/SetDebugFlag", ReplyAction="http://tempuri.org/IProjectsManagerService/SetDebugFlagResponse")]
        System.Threading.Tasks.Task SetDebugFlagAsync(string applicationIdentifier, bool debugFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/UpdateWebApplicationMeasurements", ReplyAction="http://tempuri.org/IProjectsManagerService/UpdateWebApplicationMeasurementsRespon" +
            "se")]
        ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex UpdateWebApplicationMeasurements(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/UpdateWebApplicationMeasurements", ReplyAction="http://tempuri.org/IProjectsManagerService/UpdateWebApplicationMeasurementsRespon" +
            "se")]
        System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex> UpdateWebApplicationMeasurementsAsync(string applicationIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/WriteSmtpConfig", ReplyAction="http://tempuri.org/IProjectsManagerService/WriteSmtpConfigResponse")]
        void WriteSmtpConfig(string applicationIdentifier, System.Collections.Generic.Dictionary<string, object> smtpConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectsManagerService/WriteSmtpConfig", ReplyAction="http://tempuri.org/IProjectsManagerService/WriteSmtpConfigResponse")]
        System.Threading.Tasks.Task WriteSmtpConfigAsync(string applicationIdentifier, System.Collections.Generic.Dictionary<string, object> smtpConfig);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectsManagerServiceChannel : ProjectsManager.ProjectsManagerService.IProjectsManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectsManagerServiceClient : System.ServiceModel.ClientBase<ProjectsManager.ProjectsManagerService.IProjectsManagerService>, ProjectsManager.ProjectsManagerService.IProjectsManagerService {
        
        public ProjectsManagerServiceClient() {
        }
        
        public ProjectsManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectsManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectsManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectsManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddToAccessLog(string applicationIdentifier, string userName) {
            base.Channel.AddToAccessLog(applicationIdentifier, userName);
        }
        
        public System.Threading.Tasks.Task AddToAccessLogAsync(string applicationIdentifier, string userName) {
            return base.Channel.AddToAccessLogAsync(applicationIdentifier, userName);
        }
        
        public ProjectsManager.ProjectsManagerService.UserInfo GetCentaurUserInfo() {
            return base.Channel.GetCentaurUserInfo();
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.UserInfo> GetCentaurUserInfoAsync() {
            return base.Channel.GetCentaurUserInfoAsync();
        }
        
        public bool GetDebugFlag(string applicationIdentifier) {
            return base.Channel.GetDebugFlag(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<bool> GetDebugFlagAsync(string applicationIdentifier) {
            return base.Channel.GetDebugFlagAsync(applicationIdentifier);
        }
        
        public ProjectsManager.ProjectsManagerService.UserInfo[] GetEasyWebUsers(string applicationIdentifier) {
            return base.Channel.GetEasyWebUsers(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.UserInfo[]> GetEasyWebUsersAsync(string applicationIdentifier) {
            return base.Channel.GetEasyWebUsersAsync(applicationIdentifier);
        }
        
        public string GetEasyWebVersion(string aApplicationIdentifier) {
            return base.Channel.GetEasyWebVersion(aApplicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<string> GetEasyWebVersionAsync(string aApplicationIdentifier) {
            return base.Channel.GetEasyWebVersionAsync(aApplicationIdentifier);
        }
        
        public ProjectsManager.ProjectsManagerService.AccessLogInfo GetLastAccessLog(string applicationIdentifier) {
            return base.Channel.GetLastAccessLog(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.AccessLogInfo> GetLastAccessLogAsync(string applicationIdentifier) {
            return base.Channel.GetLastAccessLogAsync(applicationIdentifier);
        }
        
        public ProjectsManager.ProjectsManagerService.AccessLogInfo[] GetLastAccessLogAll() {
            return base.Channel.GetLastAccessLogAll();
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.AccessLogInfo[]> GetLastAccessLogAllAsync() {
            return base.Channel.GetLastAccessLogAllAsync();
        }
        
        public ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex GetWebApplicationInfoComplex(string applicationIdentifier) {
            return base.Channel.GetWebApplicationInfoComplex(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex> GetWebApplicationInfoComplexAsync(string applicationIdentifier) {
            return base.Channel.GetWebApplicationInfoComplexAsync(applicationIdentifier);
        }
        
        public ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo[] GetWebApplicationListAll() {
            return base.Channel.GetWebApplicationListAll();
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfo[]> GetWebApplicationListAllAsync() {
            return base.Channel.GetWebApplicationListAllAsync();
        }
        
        public ProjectsManager.ProjectsManagerService.HostingWebServerInfo[] GetWebServerListAll() {
            return base.Channel.GetWebServerListAll();
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebServerInfo[]> GetWebServerListAllAsync() {
            return base.Channel.GetWebServerListAllAsync();
        }
        
        public ProjectsManager.ProjectsManagerService.NetDriveInfo NetDriveConnect(string applicationIdentifier) {
            return base.Channel.NetDriveConnect(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.NetDriveInfo> NetDriveConnectAsync(string applicationIdentifier) {
            return base.Channel.NetDriveConnectAsync(applicationIdentifier);
        }
        
        public bool NetDriveDisconnect(string applicationIdentifier, System.Guid token) {
            return base.Channel.NetDriveDisconnect(applicationIdentifier, token);
        }
        
        public System.Threading.Tasks.Task<bool> NetDriveDisconnectAsync(string applicationIdentifier, System.Guid token) {
            return base.Channel.NetDriveDisconnectAsync(applicationIdentifier, token);
        }
        
        public System.Collections.Generic.Dictionary<string, object> ReadSmtpConfig(string applicationIdentifier) {
            return base.Channel.ReadSmtpConfig(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> ReadSmtpConfigAsync(string applicationIdentifier) {
            return base.Channel.ReadSmtpConfigAsync(applicationIdentifier);
        }
        
        public string RequestEasyWebAccess(string applicationIdentifier, string loginName) {
            return base.Channel.RequestEasyWebAccess(applicationIdentifier, loginName);
        }
        
        public System.Threading.Tasks.Task<string> RequestEasyWebAccessAsync(string applicationIdentifier, string loginName) {
            return base.Channel.RequestEasyWebAccessAsync(applicationIdentifier, loginName);
        }
        
        public bool RestartApplication(string applicationIdentifier) {
            return base.Channel.RestartApplication(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<bool> RestartApplicationAsync(string applicationIdentifier) {
            return base.Channel.RestartApplicationAsync(applicationIdentifier);
        }
        
        public void SetDebugFlag(string applicationIdentifier, bool debugFlag) {
            base.Channel.SetDebugFlag(applicationIdentifier, debugFlag);
        }
        
        public System.Threading.Tasks.Task SetDebugFlagAsync(string applicationIdentifier, bool debugFlag) {
            return base.Channel.SetDebugFlagAsync(applicationIdentifier, debugFlag);
        }
        
        public ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex UpdateWebApplicationMeasurements(string applicationIdentifier) {
            return base.Channel.UpdateWebApplicationMeasurements(applicationIdentifier);
        }
        
        public System.Threading.Tasks.Task<ProjectsManager.ProjectsManagerService.HostingWebApplicationInfoComplex> UpdateWebApplicationMeasurementsAsync(string applicationIdentifier) {
            return base.Channel.UpdateWebApplicationMeasurementsAsync(applicationIdentifier);
        }
        
        public void WriteSmtpConfig(string applicationIdentifier, System.Collections.Generic.Dictionary<string, object> smtpConfig) {
            base.Channel.WriteSmtpConfig(applicationIdentifier, smtpConfig);
        }
        
        public System.Threading.Tasks.Task WriteSmtpConfigAsync(string applicationIdentifier, System.Collections.Generic.Dictionary<string, object> smtpConfig) {
            return base.Channel.WriteSmtpConfigAsync(applicationIdentifier, smtpConfig);
        }
    }
}
